identitySystem {

  cassandra {

    cluster {

      keyspace: ${ID_CS_KEYSPACE}
      preparedStatementCacheSize: ${ID_CS_PREPSTM_CACHE}
      //Comma-separeted values of IP/Hostname and ports
      contactPoints: ${ID_CS_NODES}
      //ANY, ONE, TWO, THREE, QUORUM, ALL, LOCAL_QUORUM, EACH_QUORUM, SERIAL, LOCAL_SERIAL, LOCAL_ONE
      consistencyLevel = ${ID_CS_CONSISTENCY_LEVEL}
      serialConsistencyLevel = ${ID_CS_SERIAL_CONSISTENCY_LEVEL}
      withSSL: ${ID_CS_WITH_SSL}
      username: ${ID_CS_USERNAME}
      password: ${ID_CS_PASSWORD}

    }

  }

  kafkaConsumer {
    //Comma-separeted values of IP/Hostname and ports
    bootstrapServers = ${ID_KFC_NODES}
    topic = ${ID_KFC_TOPIC}
    //If empty, a group id will be created.
    groupId = ${ID_KFC_GROUP}
    gracefulTimeout = 2 //In Seconds
    maxPollRecords = ${ID_KFC_MAX_POLL_RECORDS}
    fetchMaxBytesConfig = ${ID_KFC_FETCH_MAX_BYTES_CONFIG}
    maxPartitionFetchBytesConfig = ${ID_KFC_MAX_PARTITION_FETCH_BYTES_CONFIG}
    reconnectBackoffMsConfig = ${ID_KFC_RECONNECT_BACKOFF_MS_CONFIG}
    reconnectBackoffMaxMsConfig = ${ID_KFC_RECONNECT_BACKOFF_MAX_MS_CONFIG}
  }

  kafkaProducer {
    lingerMS = ${ID_KFP_LINGER_MS}
    //Comma-separeted values of IP/Hostname and ports
    bootstrapServers = ${ID_KFP_NODES}
    errorTopic = ${ID_KFC_ERROR_TOPIC}

  }

  metrics {
    prometheus {
      port = ${ID_PROM_HTTP_PORT}
    }
  }

  executionContext {
    threadPoolSize = ${ID_EXEC_THREAD_POOL_SIZE}
  }

}
